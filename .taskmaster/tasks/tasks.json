{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Monorepo and Project Structure",
        "description": "Set up the Turborepo monorepo with Next.js 15 (App Router), tRPC, Bun runtime, Prisma, and Postgres according to the PRD technical specs.",
        "details": "Use Turborepo to scaffold a monorepo containing packages for backend API, web playground, VS Code extension, and browser extension. Configure Bun as the runtime. Set up Next.js 15 with App Router for frontend and backend. Initialize Prisma with the provided PromptLog model and connect to a Postgres database.",
        "testStrategy": "Verify that all packages build and run independently. Confirm database connectivity and schema migration for PromptLog.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Backend API for Prompt Enhancement",
        "description": "Develop the `/api/enhance` endpoint using tRPC and Next.js, integrating with OpenAI and Anthropic for prompt enhancement.",
        "details": "Create a tRPC router with an `enhance` procedure accepting `{ prompt: string, model?: string }`. Integrate OpenAI and Anthropic APIs via an abstract provider layer. Ensure LLM-agnostic switching based on the `model` parameter. Return `{ enhanced: string }`.",
        "testStrategy": "Unit test API with mock LLM responses. Integration test with real OpenAI/Anthropic endpoints. Validate error handling and response format.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up tRPC in Next.js Project",
            "description": "Install required dependencies and configure tRPC within the Next.js backend, including strict mode and input validation setup.",
            "dependencies": [],
            "details": "Install @trpc/server, @trpc/client, @trpc/react-query, @trpc/next, and zod. Enable strict mode in tsconfig.json. Initialize tRPC backend and create a basic router structure.\n<info added on 2025-09-16T09:16:45.924Z>\nAdd the following files and implement the provider abstraction for LLMs:\n\n- apps/server/src/services/llm/types.ts: Define the LLMProvider interface with an enhance(prompt: string, options?: ProviderOptions) method, and ProviderOptions type with optional model property.\n- apps/server/src/services/llm/openai.ts: Implement OpenAIProvider using fetch, reading OPENAI_API_KEY from environment. If missing, throw a typed TRPCError('INTERNAL_SERVER_ERROR') with a clear message. The enhance method should call the OpenAI API and return { enhanced }.\n- apps/server/src/services/llm/anthropic.ts: Implement AnthropicProvider using fetch, reading ANTHROPIC_API_KEY from environment. If missing, throw a typed TRPCError('INTERNAL_SERVER_ERROR') with a clear message. The enhance method should call the Anthropic API and return { enhanced }.\n- apps/server/src/services/llm/index.ts: Export selectProvider(model?: string) that chooses the provider based on model prefix (\"gpt\" for OpenAI, \"claude\" for Anthropic), with a default provider fallback.\n\nEdit the router to add the enhance mutation:\n\n- apps/server/src/routers/index.ts: Add an enhance mutation with input validated by z.object({ prompt: z.string().min(1), model: z.string().optional() }). On call, select the provider using selectProvider(model), invoke provider.enhance(prompt, { model }), and return { enhanced }.\n\nNotes:\n\n- Use early returns and Zod validation for input and error handling.\n- Ensure all functions are verbose and readable, following TypeScript best practices.\n- Expect environment variables OPENAI_API_KEY and ANTHROPIC_API_KEY to be set.\n- No changes needed in apps/server/src/lib/context.ts.\n- Testing will be handled in a later subtask.\n</info added on 2025-09-16T09:16:45.924Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Abstract Provider Layer for LLMs",
            "description": "Design and implement an abstraction layer to support switching between OpenAI and Anthropic based on the model parameter.",
            "dependencies": [
              "2.1"
            ],
            "details": "Create a provider interface for LLMs. Implement adapters for OpenAI and Anthropic. Ensure provider selection logic is based on the model input.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate OpenAI and Anthropic APIs",
            "description": "Connect the abstract provider layer to OpenAI and Anthropic APIs, handling authentication, request formatting, and response parsing.",
            "dependencies": [
              "2.2"
            ],
            "details": "Implement API clients for OpenAI and Anthropic. Handle API keys securely. Map provider responses to the expected output format.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement tRPC Enhance Procedure",
            "description": "Develop the tRPC 'enhance' procedure to accept input, invoke the appropriate provider, and return the enhanced prompt.",
            "dependencies": [
              "2.3"
            ],
            "details": "Define the enhance procedure schema using zod. Route requests to the correct provider. Return { enhanced: string } in the response.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Write Unit and Integration Tests for API",
            "description": "Create comprehensive unit tests for the enhance procedure and provider layer, and integration tests with real OpenAI/Anthropic endpoints.",
            "dependencies": [
              "2.4"
            ],
            "details": "Mock LLM responses for unit tests. Validate error handling and response format. Perform integration tests with live endpoints to ensure reliability.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop Web Playground Frontend",
        "description": "Build a Next.js 15 web app for users to test prompt enhancement and view raw vs enhanced prompts side-by-side.",
        "details": "Implement a UI with two text areas (raw and enhanced), an 'Enhance' button, and preview/accept/replace workflow. Connect to the backend `/api/enhance` endpoint via tRPC. Ensure minimal UI footprint and responsive design.",
        "testStrategy": "End-to-end test: input raw prompt, click enhance, verify enhanced prompt appears. UI snapshot tests for layout and workflow.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Responsive UI Layout",
            "description": "Create a minimal, responsive UI in Next.js 15 featuring two side-by-side text areas for raw and enhanced prompts, an 'Enhance' button, and preview/accept/replace controls.",
            "dependencies": [],
            "details": "Ensure the layout adapts to different screen sizes and maintains a clean, accessible design. Use the app directory and component organization best practices for scalability.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Integrate Enhance Workflow with Backend",
            "description": "Implement the frontend logic to connect the UI to the `/api/enhance` endpoint using tRPC, handling prompt submission and response display.",
            "dependencies": [
              "3.1"
            ],
            "details": "Wire up the 'Enhance' button to send the raw prompt to the backend, receive the enhanced prompt, and update the UI accordingly. Handle loading, error, and success states.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Preview, Accept, and Replace Functionality",
            "description": "Develop the workflow allowing users to preview the enhanced prompt, accept it, or replace the raw prompt with the enhanced version.",
            "dependencies": [
              "3.2"
            ],
            "details": "Ensure seamless transitions between states and provide clear user feedback. Maintain state consistency and support undo/redo if feasible.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Conduct End-to-End and UI Snapshot Testing",
            "description": "Write and execute end-to-end tests covering the full prompt enhancement workflow and UI snapshot tests to verify layout and interactions.",
            "dependencies": [
              "3.3"
            ],
            "details": "Test inputting a raw prompt, enhancing it, previewing, accepting, and replacing. Validate responsiveness and minimal UI footprint across devices.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Create VS Code Extension with Enhance Button",
        "description": "Develop a VS Code extension that injects an 'Enhance' button into Copilot/chat panels, calling the backend API for prompt enhancement.",
        "details": "Use Yeoman generator to scaffold a TypeScript VS Code extension. Inject UI into chat panels using VS Code API. On button click, send the current prompt to `/api/enhance` and display the enhanced prompt with preview/accept/replace options. Bundle with webpack for web compatibility.",
        "testStrategy": "Manual test in VS Code Extension Development Host: write prompt, click enhance, verify enhanced prompt replaces or previews. Automated tests for command registration and API calls.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Scaffold Extension and Build Pipeline",
            "description": "Use the Yeoman generator to scaffold a new TypeScript VS Code extension project and set up the build pipeline with esbuild for bundling.",
            "dependencies": [],
            "details": "Run `yo code` to generate the extension structure. Configure esbuild for efficient TypeScript bundling and ensure compatibility with VS Code web extensions.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Enhance Command via REST API",
            "description": "Create a command that sends the current selection or prompt to the `/api/enhance` REST endpoint and handles the enhanced response.",
            "dependencies": [
              "4.1"
            ],
            "details": "Register a VS Code command that captures the current prompt, sends it to the backend API, and processes the enhanced result for display or replacement.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add or Reuse /api/enhance REST Endpoint",
            "description": "Ensure the backend provides a working `/api/enhance` endpoint for prompt enhancement, or reuse the existing implementation.",
            "dependencies": [],
            "details": "Verify that the backend API is accessible and returns enhanced prompts as expected for integration with the extension.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add Extension Settings for API Base URL and Model",
            "description": "Implement configuration contributions to allow users to set the API base URL and select the enhancement model from VS Code settings.",
            "dependencies": [
              "4.1"
            ],
            "details": "Define configuration schema in `package.json` and provide UI for users to input API details and model preferences.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add Keybinding and Status Bar Button for Quick Access",
            "description": "Register a keyboard shortcut and add a status bar button to trigger the enhance command for improved usability.",
            "dependencies": [
              "4.2"
            ],
            "details": "Update `package.json` to define a keybinding and implement a status bar item that invokes the enhance functionality.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add README, Packaging, and Licensing",
            "description": "Write a README with usage instructions, configure `.vscodeignore`, and add a LICENSE file. Prepare the extension for packaging with vsce.",
            "dependencies": [
              "4.1"
            ],
            "details": "Document installation and usage, exclude unnecessary files from the package, and ensure licensing compliance.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Add Icon, Categories, and Marketplace Metadata",
            "description": "Polish the extension's presentation by adding an icon, setting categories, and completing all required marketplace metadata.",
            "dependencies": [
              "4.1"
            ],
            "details": "Update `package.json` with icon path, categories, display name, and other metadata for marketplace publishing.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Optional: CI Publish Workflow (GitHub Actions)",
            "description": "Set up a GitHub Actions workflow to automate building, testing, and publishing the extension to the VS Code Marketplace.",
            "dependencies": [
              "4.6",
              "4.7"
            ],
            "details": "Create a workflow file that runs tests, builds the extension, and publishes it using a secure token when changes are merged to main.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Develop Browser Extension for Context Menu Enhancement",
        "description": "Build a browser extension that adds a right-click 'Enhance with AI' context menu, sending selected text to the backend API and displaying the result.",
        "details": "Use Manifest V3 for Chrome/Edge/Firefox compatibility. Implement context menu action to capture selected text, call `/api/enhance`, and show enhanced prompt in a popup or replace text. Ensure HTTPS communication with backend.",
        "testStrategy": "Manual test in supported browsers: highlight text, right-click, enhance, verify popup or replacement. Automated tests for context menu and API integration.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement AI Service Provider Abstraction Layer",
        "description": "Create an abstraction layer in the backend to support switching between OpenAI, Anthropic, and future local models (Ollama, llama.cpp).",
        "details": "Design a provider interface for LLMs. Implement adapters for OpenAI and Anthropic. Stub out local model integration for future expansion. Ensure provider selection based on API input.",
        "testStrategy": "Unit test provider selection and response mapping. Integration test with each supported provider.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "cancelled",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate Prompt Logging with Prisma and Postgres",
        "description": "Add optional prompt history feature to store raw and enhanced prompts in the database using the provided Prisma model.",
        "details": "Extend backend API to log each enhancement to Postgres via Prisma. Store userId (if available), raw, enhanced, model, and timestamp. Ensure logging is optional for MVP but core for future growth.",
        "testStrategy": "Unit test database writes. Integration test with API calls to confirm logs are created. Validate schema against PRD.",
        "priority": "medium",
        "dependencies": [
          2,
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Design and Implement Minimal UI/UX for Extensions",
        "description": "Ensure both VS Code and browser extensions follow the one-click, preview/accept/replace workflow with minimal UI footprint.",
        "details": "Review extension UIs for clutter. Implement preview and accept/replace options. Use native UI components where possible. Document UX decisions for consistency.",
        "testStrategy": "User acceptance testing with target personas. Heuristic evaluation for minimalism and workflow adherence.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Setup Deployment Pipeline for Backend and Extensions",
        "description": "Configure deployment for backend (Vercel/Render/Fly.io) and package/distribute VS Code and browser extensions. Ensure production-ready API configuration and seamless extension experience.",
        "status": "done",
        "dependencies": [
          1,
          2,
          4,
          5
        ],
        "priority": "medium",
        "details": "Set up CI/CD for backend using Vercel/Render/Fly.io, with production-ready configuration (vercel.json, documented environment variables, and DEPLOYMENT.md). Automate extension packaging and publishing (VS Code Marketplace, Chrome Web Store). Integrate smart API URL detection for both VS Code and browser extensions: VS Code uses custom URL → env vars → production default; browser uses custom URL → production default. Production default is https://prompt-enhancer.vercel.app. Ensure zero-config user experience, self-hosting support, and development-friendly localhost detection. Both extensions should have sensible defaults and allow optional customization. Ensure HTTPS and robust environment variable management.",
        "testStrategy": "Deploy backend and verify endpoint availability and correct API URL resolution. Publish extensions and validate installation/update flows, including smart API URL fallback logic and seamless production experience. Test self-hosting and development scenarios for both extensions.",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement smart API URL detection in VS Code and browser extensions",
            "description": "Ensure VS Code extension uses custom URL → env vars → production default; browser extension uses custom URL → production default. Production default is https://prompt-enhancer.vercel.app. Support zero-config for users, optional customization, and development localhost detection.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Update extension configuration UIs and settings",
            "description": "Add productionApiUrl setting and fallback logic to VS Code extension. Update browser extension popup UI to display and allow editing of the production URL. Ensure both extensions have sensible defaults and clear customization options.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Document deployment and configuration",
            "description": "Create or update vercel.json for backend deployment. Write DEPLOYMENT.md guide covering environment variable configuration, self-hosting, and extension API URL customization.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Automate CI/CD for backend and extensions",
            "description": "Set up CI/CD pipelines for backend deployment (Vercel/Render/Fly.io) and extension packaging/publishing (VS Code Marketplace, Chrome Web Store). Ensure environment variables and production API URLs are correctly injected.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-09-17T11:14:44.463Z>\n✅ CI/CD pipeline implementation is complete, covering backend deployment and extension publishing with fully automated workflows via GitHub Actions. Workflows include deploy-backend.yml (Vercel deployment with testing), publish-vscode-extension.yml (VS Code packaging and publishing), package-browser-extension.yml (browser extension packaging and validation), ci.yml (comprehensive CI for all components), release.yml (automated release/versioning), and version-bump.yml (manual version bumping). All package.json files now include CI/CD scripts for type-check, lint, test, and audit. turbo.json has updated task definitions, and ENVIRONMENT_VARIABLES.md provides a comprehensive setup guide. All required environment variables are documented, GitHub secrets are configured for CI/CD, and deployment/publishing tokens are set up for Vercel and the VS Code Marketplace. Features include automated testing before deployment, security scanning, extension validation, release automation, and multi-environment support (dev/staging/prod). The pipeline is now fully automated and production-ready.\n</info added on 2025-09-17T11:14:44.463Z>",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test production, self-hosted, and development scenarios",
            "description": "Verify backend deployment, extension publishing, and smart API URL fallback logic in production, self-hosted, and development environments. Ensure seamless user experience and correct API endpoint usage in all cases.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-09-17T11:18:33.261Z>\nProduction testing across backend, VS Code extension, and browser extension is complete, with all major features and integrations validated in production, self-hosted, and development environments. All CI/CD workflows, build processes, and packaging steps have passed, and comprehensive documentation has been created for testing and environment setup. Key issues identified during testing—such as TypeScript configuration, dependency management, and packaging exclusions—have been resolved. The system is now fully production-ready, with seamless API URL fallback logic and correct endpoint usage verified in all deployment scenarios.\n</info added on 2025-09-17T11:18:33.261Z>",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Document API, Extensions, and Developer Setup",
        "description": "Comprehensive documentation for API usage, extension installation, developer onboarding, and future enhancement guidelines is now complete. All major documentation deliverables have been produced and reviewed.",
        "status": "done",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          9
        ],
        "priority": "medium",
        "details": "Documentation deliverables include:\n\n- API Documentation (`API_DOCUMENTATION.md`): Complete API reference, request/response schemas, error handling, integration examples for VS Code and browser extensions, best practices, and performance guidelines.\n- Extension Guides (`EXTENSION_GUIDES.md`): VS Code and browser extension installation, configuration, troubleshooting, environment-specific examples, feature overview, and best practices.\n- Developer Guide (`DEVELOPER_GUIDE.md`): Development setup, project structure, workflow, testing/debugging, performance optimization, and security considerations.\n- Enhancement Guidelines (`ENHANCEMENT_GUIDELINES.md`): Future roadmap, architecture principles, technical debt, development guidelines, monitoring/observability, and open source/community guidelines.\n- Updated README (`README.md`): Project overview, installation instructions, quick start, feature highlights, development setup, and documentation links.\n- Contributing Guide (`CONTRIBUTING.md`): Code of conduct, development setup, contributing process, code style, testing, issue/PR guidelines.\n\nDocumentation coverage includes API reference with examples, extension installation guides, developer onboarding, future enhancement roadmap, contributing guidelines, and project overview/setup.",
        "testStrategy": "Peer review documentation for completeness and clarity. Validate setup instructions by onboarding a new developer. Confirm all documentation files are present, up-to-date, and accessible from the main README. Ensure troubleshooting and configuration examples are accurate for both VS Code and browser extensions.",
        "subtasks": [
          {
            "id": 1,
            "title": "Verify API Documentation Completeness",
            "description": "Ensure `API_DOCUMENTATION.md` covers all endpoints, request/response schemas, error handling, integration examples, and best practices.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Validate Extension Guides",
            "description": "Check `EXTENSION_GUIDES.md` for clear installation, configuration, troubleshooting, and environment-specific examples for both VS Code and browser extensions.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Review Developer Guide",
            "description": "Confirm `DEVELOPER_GUIDE.md` includes setup instructions, project structure, workflow, testing/debugging, performance, and security.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Check Enhancement Guidelines",
            "description": "Ensure `ENHANCEMENT_GUIDELINES.md` documents future roadmap, architecture principles, technical debt, development guidelines, monitoring, and community guidelines.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Update README and Contributing Guide",
            "description": "Verify `README.md` and `CONTRIBUTING.md` provide comprehensive project overview, installation, quick start, feature highlights, development setup, documentation links, code of conduct, contributing process, code style, testing, and issue/PR guidelines.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Conduct Peer Review of Documentation",
            "description": "Organize a peer review session to assess documentation clarity, completeness, and usability. Collect feedback and address any gaps.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Validate Developer Onboarding Flow",
            "description": "Onboard a new developer using the provided documentation. Confirm setup instructions are accurate and all guides are accessible.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-16T09:10:26.908Z",
      "updated": "2025-09-17T11:25:31.354Z",
      "description": "Tasks for master context"
    }
  }
}